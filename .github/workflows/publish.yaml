name: "Tauri Build and Publish"

on:
  workflow_dispatch:
  push:
  #   branches:
  #     - main

jobs:
  collect-version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.package-version.outputs.version }}
      tag_name: v${{ steps.package-version.outputs.version }}
      draft: "false"
      prerelease: "true"
      body: |
        See the assets to download this version and install.
      name: ObsidianIRC v${{ steps.package-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Node project version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  publish-tauri:
    needs: collect-version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-24.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-24.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.collect-version.outputs.tag_name }}
          releaseName: ${{ needs.collect-version.outputs.name }}
          releaseBody: ${{ needs.collect-version.outputs.body }}
          releaseDraft: ${{ needs.collect-version.outputs.draft == 'true' }}
          prerelease: ${{ needs.collect-version.outputs.prerelease == 'true' }}
          args: ${{ matrix.args }}

  publish-android:
    runs-on: ubuntu-latest
    needs: collect-version
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "22"
          cache: "gradle"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies
        run: npm install

      - name: Build app bundle
        run: npm run tauri android build
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837

      - name: Extract android signing key from env
        run: |
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" > src-tauri/gen/android/release.jks.base64
          base64 -d src-tauri/gen/android/release.jks.base64 > src-tauri/gen/android/release.decrypted.jks

      - name: Sign APK and AAB
        run: |
          ${{ env.ANDROID_HOME }}/build-tools/34.0.0/apksigner sign --ks src-tauri/gen/android/release.decrypted.jks \
            --ks-key-alias ${{ secrets.ANDROID_RELEASE_KEY }} \
            --ks-pass pass:${{ secrets.ANDROID_RELEASE_PASSWORD }} \
            --out src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk \
            src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk
          ${ANDROID_HOME}/build-tools/34.0.0/apksigner sign \
            --min-sdk-version 22 \
            --v1-signing-enabled true \
            --v2-signing-enabled true \
            --ks src-tauri/gen/android/release.decrypted.jks \
            --ks-key-alias ${{ secrets.ANDROID_RELEASE_KEY }} \
            --ks-pass pass:${{ secrets.ANDROID_RELEASE_PASSWORD }} \
            --out src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release-signed.aab \
              src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab

      - name: Rename APK and AAB file
        run: |
          mv ./src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk ./src-tauri/gen/android/app/build/outputs/apk/universal/release/ObsidianIRC-${{ needs.collect-version.outputs.current_version}}.apk
          mv ./src-tauri/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release-signed.aab ./src-tauri/gen/android/app/build/outputs/bundle/universalRelease/ObsidianIRC-${{ needs.collect-version.outputs.current_version}}.aab

      - name: Publish
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ needs.collect-version.outputs.draft == 'true' }}
          prerelease: ${{ needs.collect-version.outputs.prerelease == 'true' }}
          body: ${{ needs.collect-version.outputs.body }}
          name: ${{ needs.collect-version.outputs.name }}
          tag_name: ${{ needs.collect-version.outputs.tag_name }}
          generate_release_notes: true
          make_latest: true
          files: |
            ./src-tauri/gen/android/app/build/outputs/apk/universal/release/ObsidianIRC-${{ needs.collect-version.outputs.current_version}}.apk
            ./src-tauri/gen/android/app/build/outputs/bundle/universalRelease/ObsidianIRC-${{ needs.collect-version.outputs.current_version}}.aab

  publish-ios:
    runs-on: macos-latest
    needs: collect-version
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: aarch64-apple-ios

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Start Tauri iOS build with WS server
        run: |
          npm run tauri ios build -- --open &
          echo "Waiting a few seconds for the WS server to come upâ€¦"
          sleep 10

      - name: Archive iOS (unsigned)
        run: |
          xcodebuild \
            -project src-tauri/gen/apple/ObsidianIRC.xcodeproj \
            -scheme ObsidianIRC_iOS \
            -sdk iphoneos \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ${{ runner.temp }}/ObsidianIRC.xcarchive \
            clean archive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            DEVELOPMENT_TEAM=""

      - name: Package unsigned .ipa
        run: |
          cd "${{ runner.temp }}"
          # Manually create ipa sctructure
          mkdir -p Payload
          cp -R ObsidianIRC.xcarchive Payload/
          zip -0 -y -r ObsidianIRC-${{ needs.collect-version.outputs.current_version }}-unsigned.ipa Payload

      - name: Publish
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ needs.collect-version.outputs.draft == 'true' }}
          prerelease: ${{ needs.collect-version.outputs.prerelease == 'true' }}
          body: ${{ needs.collect-version.outputs.body }}
          name: ${{ needs.collect-version.outputs.name }}
          tag_name: ${{ needs.collect-version.outputs.tag_name }}
          make_latest: true
          generate_release_notes: true
          files: |
            ${{ runner.temp }}/ObsidianIRC-${{ needs.collect-version.outputs.current_version }}-unsigned.ipa

  publish-web:
    runs-on: ubuntu-latest
    needs: collect-version
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: |
          npm run build
          zip -r ObsidianIRC-web-${{ needs.collect-version.outputs.current_version}}.zip ./dist

      - name: Publish
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ needs.collect-version.outputs.draft == 'true' }}
          prerelease: ${{ needs.collect-version.outputs.prerelease == 'true' }}
          body: ${{ needs.collect-version.outputs.body }}
          name: ${{ needs.collect-version.outputs.name }}
          tag_name: ${{ needs.collect-version.outputs.tag_name }}
          make_latest: true
          generate_release_notes: true
          files: |
            ./ObsidianIRC-web-${{ needs.collect-version.outputs.current_version}}.zip
